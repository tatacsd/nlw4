{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\components\\\\Countdown.tsx\";\nimport { useContext } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nimport { CountdownContext } from '../contexts/CountdownContext';\nexport function Countdown() {\n  // import useContext from the react\n  const {\n    minutes,\n    seconds,\n    hasFinished,\n    isActive,\n    startCountdown,\n    resetCountdown\n  } = useContext(CountdownContext); // Convert the int to String\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\n  // Then split into 2 in array -> set one side and the other\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      className: styles.countdownButton,\n      children: \"Ciclo encerrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `${styles.countdownButton} ${styles.countdownButtonActive}`,\n        onClick: resetCountdown,\n        children: \"Abandonar ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startCountdown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/components/Countdown.tsx"],"names":["useContext","styles","CountdownContext","Countdown","minutes","seconds","hasFinished","isActive","startCountdown","resetCountdown","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;;AAAA,SAA8BA,UAA9B,QAAgD,OAAhD;AAEA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,SAASC,gBAAT,QAAkC,8BAAlC;AAIA,OAAO,SAASC,SAAT,GAAoB;AAEzB;AACA,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA;AANI,MAODT,UAAU,CAACE,gBAAD,CAPf,CAHyB,CAYzB;AACA;AACA;AACA;;AACA,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACR,OAAD,CAAN,CAAgBS,QAAhB,CAAyB,CAAzB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAlC;AACA,QAAK,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACP,OAAD,CAAN,CAAgBQ,QAAhB,CAAyB,CAAzB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAjC;AAGA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACgB,kBAAvB;AAAA,8BACA;AAAA,gCACE;AAAA,oBAAOP;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA,eAMA;AAAA,gCACE;AAAA,oBAAOI;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAaEV,WAAW,gBACX;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,SAAS,EAAEL,MAAM,CAACiB,eAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,gBASX;AAAA,gBACIX,QAAQ,gBACR;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAG,GAAEN,MAAM,CAACiB,eAAgB,IAAGjB,MAAM,CAACkB,qBAAsB,EAFvE;AAGE,QAAA,OAAO,EAAEV,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,gBASR;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAER,MAAM,CAACiB,eAFpB;AAGE,QAAA,OAAO,EAAEV,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ,qBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD","sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport { ChallengesContext } from '../contexts/ChallengesContext';\r\nimport styles from '../styles/components/Countdown.module.css';\r\nimport { CountdownContext }  from '../contexts/CountdownContext';\r\n\r\n\r\n\r\nexport function Countdown(){\r\n\r\n  // import useContext from the react\r\n  const { \r\n    minutes,\r\n    seconds,\r\n    hasFinished,\r\n    isActive,\r\n    startCountdown,\r\n    resetCountdown\r\n   } = useContext(CountdownContext)\r\n  \r\n  // Convert the int to String\r\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\r\n  // Then split into 2 in array -> set one side and the other\r\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2,'0').split('');\r\n  const[secondLeft, secondRight] = String(seconds).padStart(2,'0').split('');\r\n  \r\n\r\n  return(\r\n    <div>\r\n      <div className={styles.countdownContainer}>\r\n      <div>\r\n        <span>{minuteLeft}</span>\r\n        <span>{minuteRight}</span>\r\n      </div>\r\n      <span>:</span>\r\n      <div>\r\n        <span>{secondLeft}</span>\r\n        <span>{secondRight}</span>\r\n      </div>\r\n    </div>\r\n\r\n    { hasFinished ? (\r\n      <button\r\n        disabled \r\n        className={styles.countdownButton}\r\n      >\r\n        Ciclo encerrado\r\n      </button>\r\n\r\n    ) : (\r\n      <>\r\n        { isActive ? (\r\n          <button \r\n            type=\"button\"\r\n            className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n            onClick={resetCountdown}\r\n          >\r\n            Abandonar ciclo\r\n          </button>\r\n        ) : (\r\n          <button \r\n            type=\"button\"\r\n            className={styles.countdownButton}\r\n            onClick={startCountdown}\r\n          >\r\n            Iniciar um ciclo\r\n        </button>\r\n    )}\r\n\r\n      </>\r\n    )}        \r\n    </div>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}