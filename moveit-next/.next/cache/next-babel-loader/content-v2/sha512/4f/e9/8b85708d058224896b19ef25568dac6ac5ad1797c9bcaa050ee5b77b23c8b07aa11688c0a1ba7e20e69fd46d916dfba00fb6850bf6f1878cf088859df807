{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\components\\\\Countdown.tsx\";\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nexport function Countdown() {\n  // Set the timer\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60); // state to check if the countdown is active or not (it starts false)\n\n  const {\n    0: active,\n    1: setActive\n  } = useState(false); // Get minutes and seconds\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60; // Convert the int to String\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\n  // Then split into 2 in array -> set one side and the other\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split(''); // function to reduce second by second when clicked the button\n\n  function startCountdown() {\n    setActive(true);\n  }\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\n\n\n  useEffect(() => {\n    if (active && time > 0) {\n      setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    }\n  }, [active, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: startCountdown,\n      children: \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/components/Countdown.tsx"],"names":["useState","useEffect","styles","Countdown","time","setTime","active","setActive","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startCountdown","setTimeout","countdownContainer","countdownButton"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,SAASC,SAAT,GAAoB;AAEzB;AACA,QAAK;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,KAAK,EAAN,CAA/B,CAHyB,CAIzB;;AACA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAsBP,QAAQ,CAAC,KAAD,CAApC,CALyB,CAQzB;;AACA,QAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB,CAVyB,CAYzB;AACA;AACA;AACA;;AACA,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAlC;AACA,QAAK,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAjC,CAjByB,CAoBzB;;AACA,WAASG,cAAT,GAAyB;AACvBZ,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEN,EAAAA,SAAS,CAAC,MAAK;AACb,QAAGK,MAAM,IAAIF,IAAI,GAAG,CAApB,EAAsB;AACpBgB,MAAAA,UAAU,CAAC,MAAM;AACff,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACE,MAAD,EAASF,IAAT,CANM,CAAT;AAQA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACmB,kBAAvB;AAAA,8BACA;AAAA,gCACE;AAAA,oBAAOT;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA,eAMA;AAAA,gCACE;AAAA,oBAAOI;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaA;AAAQ,MAAA,IAAI,EAAC,QAAb;AACA,MAAA,SAAS,EAAEhB,MAAM,CAACoB,eADlB;AAEA,MAAA,OAAO,EAAEH,cAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport styles from '../styles/components/Countdown.module.css'\r\n\r\nexport function Countdown(){\r\n\r\n  // Set the timer\r\n  const[time, setTime] = useState(25 * 60);\r\n  // state to check if the countdown is active or not (it starts false)\r\n  const [active, setActive] = useState(false);\r\n\r\n\r\n  // Get minutes and seconds\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  // Convert the int to String\r\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\r\n  // Then split into 2 in array -> set one side and the other\r\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2,'0').split('');\r\n  const[secondLeft, secondRight] = String(seconds).padStart(2,'0').split('');\r\n  \r\n  \r\n  // function to reduce second by second when clicked the button\r\n  function startCountdown(){\r\n    setActive(true);    \r\n  }\r\n\r\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\r\n  useEffect(()=> {\r\n    if(active && time > 0){\r\n      setTimeout(() => {\r\n        setTime(time-1);\r\n      }, 1000)\r\n    }\r\n  }, [active, time])\r\n\r\n  return(\r\n    <div>\r\n      <div className={styles.countdownContainer}>\r\n      <div>\r\n        <span>{minuteLeft}</span>\r\n        <span>{minuteRight}</span>\r\n      </div>\r\n      <span>:</span>\r\n      <div>\r\n        <span>{secondLeft}</span>\r\n        <span>{secondRight}</span>\r\n      </div>\r\n    </div>\r\n\r\n    <button type=\"button\"\r\n    className={styles.countdownButton}\r\n    onClick={startCountdown}>\r\n      Iniciar um ciclo\r\n    </button>\r\n    </div>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}