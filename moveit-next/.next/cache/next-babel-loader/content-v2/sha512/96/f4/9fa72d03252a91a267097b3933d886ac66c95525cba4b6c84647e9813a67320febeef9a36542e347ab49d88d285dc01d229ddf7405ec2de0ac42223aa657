{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/Developer/nlw4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\components\\\\Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nvar countdownTimeout;\nexport function Countdown() {\n  _s();\n\n  // STATES\n  // Set the timer\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; // state to check if the countdown is active or not (it starts false)\n\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1]; // Get minutes and seconds\n\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60; // Convert the int to String\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\n  // Then split into 2 in array -> set one side and the other\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1]; // function to reduce second by second when clicked the button\n\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), hasFinished && /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n      onClick: resetCountdown,\n      children: \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 8\n    }, this), isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n      onClick: resetCountdown,\n      children: \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: startCountdown,\n      children: \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Countdown, \"zMEuIev5oGYBR6jD/swcyLIfj/8=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/components/Countdown.tsx"],"names":["useState","useEffect","styles","countdownTimeout","Countdown","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","startCountdown","resetCountdown","clearTimeout","setTimeout","countdownContainer","countdownButton","countdownButtonActive"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport styles from '../styles/components/Countdown.module.css'\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function Countdown(){\r\n\r\n  // STATES\r\n  // Set the timer\r\n  const[time, setTime] = useState(0.1 * 60);\r\n  // state to check if the countdown is active or not (it starts false)\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false)\r\n\r\n\r\n  // Get minutes and seconds\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  // Convert the int to String\r\n  // Test if there is 2 spaces, if not add a 0 on the left (padStart)\r\n  // Then split into 2 in array -> set one side and the other\r\n  // ex.: 25 => \"2\" \"5\"   5 => \"0\"  \"5\"\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2,'0').split('');\r\n  const[secondLeft, secondRight] = String(seconds).padStart(2,'0').split('');\r\n  \r\n  \r\n  // function to reduce second by second when clicked the button\r\n  function startCountdown(){\r\n    setIsActive(true);    \r\n  }\r\n\r\n  function resetCountdown(){\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n  }\r\n\r\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\r\n  useEffect(()=> {\r\n    if(isActive && time > 0){\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time-1);\r\n      }, 1000)\r\n    } else if(isActive &&  time == 0){\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n    }\r\n  }, [isActive, time])\r\n\r\n  return(\r\n    <div>\r\n      <div className={styles.countdownContainer}>\r\n      <div>\r\n        <span>{minuteLeft}</span>\r\n        <span>{minuteRight}</span>\r\n      </div>\r\n      <span>:</span>\r\n      <div>\r\n        <span>{secondLeft}</span>\r\n        <span>{secondRight}</span>\r\n      </div>\r\n    </div>\r\n\r\n    { hasFinished && (\r\n       <button \r\n        type=\"button\"\r\n        className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n        onClick={resetCountdown}\r\n        >\r\n       Abandonar ciclo\r\n     </button>\r\n\r\n    )}\r\n\r\n\r\n    { isActive ? (\r\n      <button \r\n        type=\"button\"\r\n        className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n        onClick={resetCountdown}\r\n        >\r\n        Abandonar ciclo\r\n      </button>\r\n\r\n    ) : (\r\n      <button \r\n        type=\"button\"\r\n        className={styles.countdownButton}\r\n        onClick={startCountdown}\r\n        >\r\n        Iniciar um ciclo\r\n    </button>\r\n    )}    \r\n    </div>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}