{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { Children, createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallange = _useContext.startNewChallange; // STATES\n  // Set the timer\n\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; // state to check if the countdown is active or not (it starts false)\n\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1]; // Get minutes and seconds\n\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60; // function to reduce second by second when clicked the button\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallange();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: Children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"+PqWCON/Td/Sg2Za/BMsMLinGLw=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/contexts/CountdownContext.tsx"],"names":["Children","createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallange","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,aAAnB,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,QAApE,QAAoF,OAApF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAE,EAAF,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBAExCP,UAAU,CAACG,iBAAD,CAF8B;AAAA,MAE9DK,iBAF8D,eAE9DA,iBAF8D,EAItE;AACA;;;AALsE,kBAM/CN,QAAQ,CAAC,MAAM,EAAP,CANuC;AAAA,MAMhEO,IANgE;AAAA,MAM1DC,OAN0D,iBAOtE;;;AAPsE,mBAQtCR,QAAQ,CAAC,KAAD,CAR8B;AAAA,MAQ/DS,QAR+D;AAAA,MAQrDC,WARqD;;AAAA,mBAShCV,QAAQ,CAAC,KAAD,CATwB;AAAA,MAS/DW,WAT+D;AAAA,MASlDC,cATkD,kBAYtE;;;AACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB,CAdsE,CAgBtE;;AACA,WAASU,cAAT,GAAyB;AACvBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAAyB;AACvBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACET,EAAAA,SAAS,CAAC,YAAK;AACb,QAAGU,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AACtBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAGE,QAAQ,IAAKF,IAAI,IAAI,CAAxB,EAA0B;AAC/BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCM,MAAAA,OAAO,EAAPA,OADgC;AAEhCG,MAAAA,OAAO,EAAPA,OAFgC;AAGhCL,MAAAA,WAAW,EAAXA,WAHgC;AAIhCF,MAAAA,QAAQ,EAARA,QAJgC;AAKhCQ,MAAAA,cAAc,EAAdA,cALgC;AAMhCC,MAAAA,cAAc,EAAdA;AANgC,KAAlC;AAAA,cAQGtB;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA9DeQ,iB;;KAAAA,iB","sourcesContent":["import { Children, createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  startCountdown: () => void;\r\n  resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext ({} as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n\r\n  const { startNewChallange } = useContext(ChallengesContext);\r\n  \r\n  // STATES\r\n  // Set the timer\r\n  const[time, setTime] = useState(0.1 * 60);\r\n  // state to check if the countdown is active or not (it starts false)\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false)\r\n\r\n\r\n  // Get minutes and seconds\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  // function to reduce second by second when clicked the button\r\n  function startCountdown(){\r\n    setIsActive(true);    \r\n  }\r\n\r\n  function resetCountdown(){\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n  }\r\n\r\n  /*\r\n  Explanation:\r\n  UseEffect is a hook for collateral damage -> when something happen do something else\r\n  It has two parameters:\r\n    - The first one is -> what will be executed (always a function -> arrow function)\r\n      -- check if countdown is active and time is grater than zero\r\n        -- execute another function (setTimeout) AFTER one second\r\n          -- timeoutfunction -> reduce one second of the time.\r\n    - Second one is -> when i want to execute it\r\n      -- when active and time change.\r\n  */\r\n  useEffect(()=> {\r\n    if(isActive && time > 0){\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time-1);\r\n      }, 1000)\r\n    } else if(isActive &&  time == 0){\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallange();\r\n    }\r\n  }, [isActive, time])\r\n\r\n  return(\r\n    <CountdownContext.Provider value={{\r\n      minutes,\r\n      seconds,\r\n      hasFinished,\r\n      isActive,\r\n      startCountdown,\r\n      resetCountdown\r\n     }}>\r\n      {Children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}