{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nimport Cookies from 'js-cookie';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // Formula to next level\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // \n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallange() {\n    // Pick a random challenge\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission == 'granted') {\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    // Validation; the user cannot call it if they have the challenge active\n    if (!activeChallenge) {\n      return;\n    }\n\n    new Audio('/notification.mp3');\n    const {\n      amount\n    } = activeChallenge; // let it change \"let\"\n\n    let finalExperience = currentExperience + amount; // Check to see if it user leveled up \n\n    if (finalExperience >= experienceToNextLevel) {\n      // Add the rest of the xp to the finalExperience\n      finalExperience = finalExperience - experienceToNextLevel; // Increase the level\n\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallange,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","Cookies","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallange","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completeChallenge","Audio","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport challenges from '../../challenges.json'\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\ninterface Challenge {\r\n  type: 'body' | 'eye';\r\n  description: string;\r\n  amount: number;\r\n\r\n}\r\n\r\ninterface ChallengeContextData {\r\n  level: number; \r\n  currentExperience: number; \r\n  challengesCompleted: number; \r\n  levelUp: () => void;\r\n  startNewChallange: () => void; \r\n  activeChallenge: Challenge;\r\n  resetChallenge: () => void;\r\n  experienceToNextLevel: number;\r\n  completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  // Component reac use import reactNode to accept children\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengeContextData);\r\n\r\nexport function ChallengesProvider({ children}: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState (0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  // Formula to next level\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4 , 2);\r\n\r\n  // \r\n  useEffect(() => {\r\n    Notification.requestPermission();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    Cookies.set('level', String(level));\r\n    Cookies.set('currentExperience', String(currentExperience));\r\n    Cookies.set('challengesCompleted', String(challengesCompleted));\r\n\r\n  }, [level, currentExperience, challengesCompleted])\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallange(){\r\n    // Pick a random challenge\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n    setActiveChallenge(challenge);\r\n\r\n    if (Notification.permission == 'granted'){\r\n      new Notification('Novo desafio',{\r\n        body: `Valendo ${challenge.amount}xp!`\r\n      })\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  \r\n  function completeChallenge() {\r\n    // Validation; the user cannot call it if they have the challenge active\r\n    if(!activeChallenge){\r\n      return;\r\n    }\r\n    new Audio('/notification.mp3')\r\n    \r\n    const { amount } = activeChallenge;\r\n\r\n    // let it change \"let\"\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    // Check to see if it user leveled up \r\n    if( finalExperience >= experienceToNextLevel){\r\n      // Add the rest of the xp to the finalExperience\r\n      finalExperience = finalExperience - experienceToNextLevel;\r\n      // Increase the level\r\n      levelUp();\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n\r\n  }\r\n\r\n  return(\r\n    <ChallengesContext.Provider \r\n      value={{ \r\n        level, \r\n        currentExperience, \r\n        challengesCompleted, \r\n        levelUp, \r\n        startNewChallange,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        experienceToNextLevel,\r\n        completeChallenge\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}