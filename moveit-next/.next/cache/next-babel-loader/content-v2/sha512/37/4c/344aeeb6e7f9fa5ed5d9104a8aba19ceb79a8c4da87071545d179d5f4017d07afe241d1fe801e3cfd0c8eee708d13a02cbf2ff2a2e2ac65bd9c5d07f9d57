{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // Formula to next level\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallange() {\n    // Pick a random challenge\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    // Validation; the user cannot call it if they have the challenge active\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge; // let it change \"let\"\n\n    let finalExperience = currentExperience + amount; // Check to see if it user leveled up \n\n    if (finalExperience >= experienceToNextLevel) {\n      // Increase the level\n      levelUp(); // Add the rest of the xp to the finalExperience\n\n      finalExperience = finalExperience - experienceToNextLevel;\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallange,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallange","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AA2BA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AACvE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAE,CAAF,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD,CALuE,CAOvE;;AACA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA2B,CAA3B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA4B;AAC1B;AACA,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAGD,WAASY,iBAAT,GAA6B;AAC3B;AACA,QAAG,CAACb,eAAJ,EAAoB;AAClB;AACD;;AAED,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB,CAN2B,CAQ3B;;AACA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C,CAT2B,CAW3B;;AACA,QAAIC,eAAe,IAAIb,qBAAvB,EAA6C;AAC3C;AACAG,MAAAA,OAAO,GAFoC,CAI3C;;AACAU,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACD;;AAEDL,IAAAA,oBAAoB,CAACkB,eAAD,CAApB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAGD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILO,MAAAA,OAJK;AAKLC,MAAAA,iBALK;AAMLN,MAAAA,eANK;AAOLY,MAAAA,cAPK;AAQLV,MAAAA,qBARK;AASLW,MAAAA;AATK,KADT;AAAA,cAaGpB;AAbH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json'\r\n\r\n\r\ninterface Challenge {\r\n  type: 'body' | 'eye';\r\n  description: string;\r\n  amount: number;\r\n\r\n}\r\n\r\ninterface ChallengeContextData {\r\n  level: number; \r\n  currentExperience: number; \r\n  challengesCompleted: number; \r\n  levelUp: () => void;\r\n  startNewChallange: () => void; \r\n  activeChallenge: Challenge;\r\n  resetChallenge: () => void;\r\n  experienceToNextLevel: number;\r\n  completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  // Component reac use import reactNode to accept children\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengeContextData);\r\n\r\nexport function ChallengesProvider({ children}: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState (0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  // Formula to next level\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4 , 2);\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallange(){\r\n    // Pick a random challenge\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n    setActiveChallenge(challenge);\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  \r\n  function completeChallenge() {\r\n    // Validation; the user cannot call it if they have the challenge active\r\n    if(!activeChallenge){\r\n      return;\r\n    }\r\n\r\n    const { amount } = activeChallenge;\r\n\r\n    // let it change \"let\"\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    // Check to see if it user leveled up \r\n    if( finalExperience >= experienceToNextLevel){\r\n      // Increase the level\r\n      levelUp();\r\n\r\n      // Add the rest of the xp to the finalExperience\r\n      finalExperience = finalExperience - experienceToNextLevel;\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n\r\n  }\r\n\r\n  return(\r\n    <ChallengesContext.Provider \r\n      value={{ \r\n        level, \r\n        currentExperience, \r\n        challengesCompleted, \r\n        levelUp, \r\n        startNewChallange,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        experienceToNextLevel,\r\n        completeChallenge\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}