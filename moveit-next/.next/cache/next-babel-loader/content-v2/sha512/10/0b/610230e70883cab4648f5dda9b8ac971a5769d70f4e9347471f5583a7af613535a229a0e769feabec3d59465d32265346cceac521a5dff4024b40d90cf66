{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Developer\\\\nlw4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1]; // Formula to next level\n\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2); // \n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallange() {\n    // Pick a random challenge\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission == \"granted\") {\n      new Notification('Novo desafio', {\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    // Validation; the user cannot call it if they have the challenge active\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount; // let it change \"let\"\n\n    var finalExperience = currentExperience + amount; // Check to see if it user leveled up \n\n    if (finalExperience >= experienceToNextLevel) {\n      // Increase the level\n      levelUp(); // Add the rest of the xp to the finalExperience\n\n      finalExperience = finalExperience - experienceToNextLevel;\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallange: startNewChallange,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"mXQLPpEuqfijIicM0DJuMSLmJHY=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["D:/Developer/nlw4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallange","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport challenges from '../../challenges.json'\r\n\r\n\r\ninterface Challenge {\r\n  type: 'body' | 'eye';\r\n  description: string;\r\n  amount: number;\r\n\r\n}\r\n\r\ninterface ChallengeContextData {\r\n  level: number; \r\n  currentExperience: number; \r\n  challengesCompleted: number; \r\n  levelUp: () => void;\r\n  startNewChallange: () => void; \r\n  activeChallenge: Challenge;\r\n  resetChallenge: () => void;\r\n  experienceToNextLevel: number;\r\n  completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  // Component reac use import reactNode to accept children\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengeContextData);\r\n\r\nexport function ChallengesProvider({ children}: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState (0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  // Formula to next level\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4 , 2);\r\n\r\n  // \r\n  useEffect(() => {\r\n    Notification.requestPermission();\r\n  }, [])\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallange(){\r\n    // Pick a random challenge\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n    setActiveChallenge(challenge);\r\n\r\n    if(Notification.permission == \"granted\"){\r\n      new Notification('Novo desafio',{\r\n        body: `Valendo ${challenge.amount}xp!`\r\n      })\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  \r\n  function completeChallenge() {\r\n    // Validation; the user cannot call it if they have the challenge active\r\n    if(!activeChallenge){\r\n      return;\r\n    }\r\n\r\n    const { amount } = activeChallenge;\r\n\r\n    // let it change \"let\"\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    // Check to see if it user leveled up \r\n    if( finalExperience >= experienceToNextLevel){\r\n      // Increase the level\r\n      levelUp();\r\n\r\n      // Add the rest of the xp to the finalExperience\r\n      finalExperience = finalExperience - experienceToNextLevel;\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n\r\n  }\r\n\r\n  return(\r\n    <ChallengesContext.Provider \r\n      value={{ \r\n        level, \r\n        currentExperience, \r\n        challengesCompleted, \r\n        levelUp, \r\n        startNewChallange,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        experienceToNextLevel,\r\n        completeChallenge\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}